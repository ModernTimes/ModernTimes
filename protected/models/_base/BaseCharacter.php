<?php

/**
 * Properties and related Models:
 *
 * - integer id
 * - integer userID
 * - integer active
 * - string name
 * - string sex
 * - string class
 * - integer ongoingBattleID
 * - integer ongoingEncounterID
 * - integer turns
 * - integer badConscience
 * - integer networkStrainedness
 * - integer resolutenessSub
 * - integer willpowerSub
 * - integer cunningSub
 * - integer hp
 * - integer energy
 * - integer cash
 * - integer kudosPopulace
 * - integer kudosFinance
 * - integer kudosRealEconomy
 * - integer kudosPolice
 * - integer kudosUnderworld
 * - integer kudosSociety
 * - integer kudosPress
 * - integer kudosBureaucracy
 *
 * - User user
 * - CharacterBattleskills characterBattleskills
 * - CharacterContacts characterContacts
 * - CharacterEffects characterEffects
 * - CharacterEncounters characterEncounters
 * - CharacterEquipments characterEquipments
 * - CharacterFamiliars characterFamiliars
 * - CharacterItems characterItems
 * - CharacterQuests characterQuests
 * - CharacterRecipes characterRecipes
 * - CharacterSkills characterSkills
 * - CharacterSkillsets characterSkillsets
 * <br>
 * <p>This is the model base class for the table "{{character}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Character".</p>
 * <p>Beware: decimals and floats can show up as strings in the attribute list</p>
 *
 * @package System.Models.Base
 */
abstract class BaseCharacter extends GxActiveRecord {

    /**
     * Factory method to get Model objects
     * @link http://www.yiiframework.com/doc/api/CModel
     * @param string $className
     * @return CModel
     */
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	/**
	 * Returns the name of the table that this model is based on
	 * @return string
	 */
	public function tableName() {
		return '{{character}}';
	}

	/**
	 * Returns a label for this Model (singular or plural) based on $n
	 * @param int $n default 1
	 * @return string
	 */
	public static function label($n = 1) {
		return Yii::t('app', 'Character|Characters', $n);
	}

	/**
	 * Returns a string or array of strings
	 * Not quite sure what this is for, though
	 * @return mixed
	 */
	public static function representingColumn() {
		return 'name';
	}

	/**
	 * Returns an array with rules that specify valid Model data
	 * @return array
	 */
	public function rules() {
		return array(
			array('userID, name', 'required'),
			array('userID, active, ongoingBattleID, ongoingEncounterID, turns, badConscience, networkStrainedness, resolutenessSub, willpowerSub, cunningSub, hp, energy, cash, kudosPopulace, kudosFinance, kudosRealEconomy, kudosPolice, kudosUnderworld, kudosSociety, kudosPress, kudosBureaucracy', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>100),
			array('sex', 'length', 'max'=>6),
			array('class', 'length', 'max'=>10),
			array('active, sex, class, ongoingBattleID, ongoingEncounterID, turns, badConscience, networkStrainedness, resolutenessSub, willpowerSub, cunningSub, hp, energy, cash, kudosPopulace, kudosFinance, kudosRealEconomy, kudosPolice, kudosUnderworld, kudosSociety, kudosPress, kudosBureaucracy', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, userID, active, name, sex, class, ongoingBattleID, ongoingEncounterID, turns, badConscience, networkStrainedness, resolutenessSub, willpowerSub, cunningSub, hp, energy, cash, kudosPopulace, kudosFinance, kudosRealEconomy, kudosPolice, kudosUnderworld, kudosSociety, kudosPress, kudosBureaucracy', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * Returns an array of the form 
	 * "relationAttributeName" => array(BELONGS_TO|HAS_MANY, foreign Model, foreign attribute (key))
	 * @return array
	 */
	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'User', 'userID'),
			'characterBattleskills' => array(self::HAS_MANY, 'CharacterBattleskills', 'characterID'),
			'characterContacts' => array(self::HAS_MANY, 'CharacterContacts', 'characterID'),
			'characterEffects' => array(self::HAS_MANY, 'CharacterEffects', 'characterID'),
			'characterEncounters' => array(self::HAS_MANY, 'CharacterEncounters', 'characterID'),
			'characterEquipments' => array(self::HAS_MANY, 'CharacterEquipments', 'characterID'),
			'characterFamiliars' => array(self::HAS_MANY, 'CharacterFamiliars', 'characterID'),
			'characterItems' => array(self::HAS_MANY, 'CharacterItems', 'characterID'),
			'characterQuests' => array(self::HAS_MANY, 'CharacterQuests', 'characterID'),
			'characterRecipes' => array(self::HAS_MANY, 'CharacterRecipes', 'characterID'),
			'characterSkills' => array(self::HAS_MANY, 'CharacterSkills', 'characterID'),
			'characterSkillsets' => array(self::HAS_MANY, 'CharacterSkillsets', 'characterID'),
		);
	}

	/**
	 * Returns an array that specifies pivotModel configurations
	 * @return array
	 */
	public function pivotModels() {
		return array(
		);
	}

	/**
	 * Returns an array with attributeLabels for the Model's attributes
	 * @return array
	 */
	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'userID' => null,
			'active' => Yii::t('app', 'Active'),
			'name' => Yii::t('app', 'Name'),
			'sex' => Yii::t('app', 'Sex'),
			'class' => Yii::t('app', 'Class'),
			'ongoingBattleID' => Yii::t('app', 'Ongoing Battle'),
			'ongoingEncounterID' => Yii::t('app', 'Ongoing Encounter'),
			'turns' => Yii::t('app', 'Turns'),
			'badConscience' => Yii::t('app', 'Bad Conscience'),
			'networkStrainedness' => Yii::t('app', 'Network Strainedness'),
			'resolutenessSub' => Yii::t('app', 'Resoluteness Sub'),
			'willpowerSub' => Yii::t('app', 'Willpower Sub'),
			'cunningSub' => Yii::t('app', 'Cunning Sub'),
			'hp' => Yii::t('app', 'Hp'),
			'energy' => Yii::t('app', 'Energy'),
			'cash' => Yii::t('app', 'Cash'),
			'kudosPopulace' => Yii::t('app', 'Kudos Populace'),
			'kudosFinance' => Yii::t('app', 'Kudos Finance'),
			'kudosRealEconomy' => Yii::t('app', 'Kudos Real Economy'),
			'kudosPolice' => Yii::t('app', 'Kudos Police'),
			'kudosUnderworld' => Yii::t('app', 'Kudos Underworld'),
			'kudosSociety' => Yii::t('app', 'Kudos Society'),
			'kudosPress' => Yii::t('app', 'Kudos Press'),
			'kudosBureaucracy' => Yii::t('app', 'Kudos Bureaucracy'),
			'user' => null,
			'characterBattleskills' => null,
			'characterContacts' => null,
			'characterEffects' => null,
			'characterEncounters' => null,
			'characterEquipments' => null,
			'characterFamiliars' => null,
			'characterItems' => null,
			'characterQuests' => null,
			'characterRecipes' => null,
			'characterSkills' => null,
			'characterSkillsets' => null,
		);
	}

	/**
	 * Returns a CActiveDataProvider, fed with search criteria based
	 * on the object's attributes
	 * @return CActiveDataProvider
	 * @link http://www.yiiframework.com/doc/api/CActiveDataProvider
	 */
	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('userID', $this->userID);
		$criteria->compare('active', $this->active);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('sex', $this->sex, true);
		$criteria->compare('class', $this->class, true);
		$criteria->compare('ongoingBattleID', $this->ongoingBattleID);
		$criteria->compare('ongoingEncounterID', $this->ongoingEncounterID);
		$criteria->compare('turns', $this->turns);
		$criteria->compare('badConscience', $this->badConscience);
		$criteria->compare('networkStrainedness', $this->networkStrainedness);
		$criteria->compare('resolutenessSub', $this->resolutenessSub);
		$criteria->compare('willpowerSub', $this->willpowerSub);
		$criteria->compare('cunningSub', $this->cunningSub);
		$criteria->compare('hp', $this->hp);
		$criteria->compare('energy', $this->energy);
		$criteria->compare('cash', $this->cash);
		$criteria->compare('kudosPopulace', $this->kudosPopulace);
		$criteria->compare('kudosFinance', $this->kudosFinance);
		$criteria->compare('kudosRealEconomy', $this->kudosRealEconomy);
		$criteria->compare('kudosPolice', $this->kudosPolice);
		$criteria->compare('kudosUnderworld', $this->kudosUnderworld);
		$criteria->compare('kudosSociety', $this->kudosSociety);
		$criteria->compare('kudosPress', $this->kudosPress);
		$criteria->compare('kudosBureaucracy', $this->kudosBureaucracy);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}