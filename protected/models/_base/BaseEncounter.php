<?php

/**
 * This is the model base class for the table "{{encounter}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Encounter".
 *
 * Columns in table "{{encounter}}" available as properties of the model,
 * followed by relations of table "{{encounter}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $specialClass
 * @property integer $onetime
 * @property string $msg
 * @property integer $costsAction
 * @property integer $gainCash
 * @property integer $gainFavours
 * @property integer $gainKudos
 * @property integer $gainXp
 * @property integer $gainResoluteness
 * @property integer $gainWillpower
 * @property integer $gainCunning
 * @property integer $effectID
 * @property integer $effectDuration
 *
 * @property AreaEncounters[] $areaEncounters
 * @property Effect $effect
 * @property EncounterEncounters[] $encounterEncounters
 * @property EncounterEncounters[] $encounterEncounters1
 * @property EncounterItems[] $encounterItems
 */
abstract class BaseEncounter extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{encounter}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Encounter|Encounters', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, specialClass, msg, effectID', 'required'),
			array('onetime, costsAction, gainCash, gainFavours, gainKudos, gainXp, gainResoluteness, gainWillpower, gainCunning, effectID, effectDuration', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>150),
			array('specialClass', 'length', 'max'=>50),
			array('onetime, costsAction, gainCash, gainFavours, gainKudos, gainXp, gainResoluteness, gainWillpower, gainCunning, effectDuration', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, specialClass, onetime, msg, costsAction, gainCash, gainFavours, gainKudos, gainXp, gainResoluteness, gainWillpower, gainCunning, effectID, effectDuration', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'areaEncounters' => array(self::HAS_MANY, 'AreaEncounters', 'encounterID'),
			'effect' => array(self::BELONGS_TO, 'Effect', 'effectID'),
			'encounterEncounters' => array(self::HAS_MANY, 'EncounterEncounters', 'fromEncounterID'),
			'encounterEncounters1' => array(self::HAS_MANY, 'EncounterEncounters', 'toEncounterID'),
			'encounterItems' => array(self::HAS_MANY, 'EncounterItems', 'encounterID'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'specialClass' => Yii::t('app', 'Special Class'),
			'onetime' => Yii::t('app', 'Onetime'),
			'msg' => Yii::t('app', 'Msg'),
			'costsAction' => Yii::t('app', 'Costs Action'),
			'gainCash' => Yii::t('app', 'Gain Cash'),
			'gainFavours' => Yii::t('app', 'Gain Favours'),
			'gainKudos' => Yii::t('app', 'Gain Kudos'),
			'gainXp' => Yii::t('app', 'Gain Xp'),
			'gainResoluteness' => Yii::t('app', 'Gain Resoluteness'),
			'gainWillpower' => Yii::t('app', 'Gain Willpower'),
			'gainCunning' => Yii::t('app', 'Gain Cunning'),
			'effectID' => null,
			'effectDuration' => Yii::t('app', 'Effect Duration'),
			'areaEncounters' => null,
			'effect' => null,
			'encounterEncounters' => null,
			'encounterEncounters1' => null,
			'encounterItems' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('specialClass', $this->specialClass, true);
		$criteria->compare('onetime', $this->onetime);
		$criteria->compare('msg', $this->msg, true);
		$criteria->compare('costsAction', $this->costsAction);
		$criteria->compare('gainCash', $this->gainCash);
		$criteria->compare('gainFavours', $this->gainFavours);
		$criteria->compare('gainKudos', $this->gainKudos);
		$criteria->compare('gainXp', $this->gainXp);
		$criteria->compare('gainResoluteness', $this->gainResoluteness);
		$criteria->compare('gainWillpower', $this->gainWillpower);
		$criteria->compare('gainCunning', $this->gainCunning);
		$criteria->compare('effectID', $this->effectID);
		$criteria->compare('effectDuration', $this->effectDuration);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}