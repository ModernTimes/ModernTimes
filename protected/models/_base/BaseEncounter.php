<?php

/**
 * This is the model base class for the table "{{encounter}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Encounter".
 *
 * Columns in table "{{encounter}}" available as properties of the model,
 * followed by relations of table "{{encounter}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $nameOption
 * @property string $specialClass
 * @property string $msg
 * @property integer $costAdventure
 * @property integer $dropCash
 * @property integer $dropFavours
 * @property integer $dropKudos
 * @property integer $gainXp
 * @property integer $gainResoluteness
 * @property integer $gainWillpower
 * @property integer $gainCunning
 * @property integer $createEffect
 *
 * @property AreaEncounters[] $areaEncounters
 * @property Effect $createEffect0
 * @property EncounterEncounters[] $encounterEncounters
 * @property EncounterEncounters[] $encounterEncounters1
 * @property EncounterItems[] $encounterItems
 */
abstract class BaseEncounter extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{encounter}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Encounter|Encounters', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, nameOption, specialClass, msg', 'required'),
			array('costAdventure, dropCash, dropFavours, dropKudos, gainXp, gainResoluteness, gainWillpower, gainCunning, createEffect', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>150),
			array('nameOption', 'length', 'max'=>100),
			array('specialClass', 'length', 'max'=>50),
			array('costAdventure, dropCash, dropFavours, dropKudos, gainXp, gainResoluteness, gainWillpower, gainCunning, createEffect', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, nameOption, specialClass, msg, costAdventure, dropCash, dropFavours, dropKudos, gainXp, gainResoluteness, gainWillpower, gainCunning, createEffect', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'areaEncounters' => array(self::HAS_MANY, 'AreaEncounters', 'encounterID'),
			'createEffect0' => array(self::BELONGS_TO, 'Effect', 'createEffect'),
			'encounterEncounters' => array(self::HAS_MANY, 'EncounterEncounters', 'toEncounterID'),
			'encounterEncounters1' => array(self::HAS_MANY, 'EncounterEncounters', 'fromEncounterID'),
			'encounterItems' => array(self::HAS_MANY, 'EncounterItems', 'encounterID'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'nameOption' => Yii::t('app', 'Name Option'),
			'specialClass' => Yii::t('app', 'Special Class'),
			'msg' => Yii::t('app', 'Msg'),
			'costAdventure' => Yii::t('app', 'Cost Adventure'),
			'dropCash' => Yii::t('app', 'Drop Cash'),
			'dropFavours' => Yii::t('app', 'Drop Favours'),
			'dropKudos' => Yii::t('app', 'Drop Kudos'),
			'gainXp' => Yii::t('app', 'Gain Xp'),
			'gainResoluteness' => Yii::t('app', 'Gain Resoluteness'),
			'gainWillpower' => Yii::t('app', 'Gain Willpower'),
			'gainCunning' => Yii::t('app', 'Gain Cunning'),
			'createEffect' => null,
			'areaEncounters' => null,
			'createEffect0' => null,
			'encounterEncounters' => null,
			'encounterEncounters1' => null,
			'encounterItems' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('nameOption', $this->nameOption, true);
		$criteria->compare('specialClass', $this->specialClass, true);
		$criteria->compare('msg', $this->msg, true);
		$criteria->compare('costAdventure', $this->costAdventure);
		$criteria->compare('dropCash', $this->dropCash);
		$criteria->compare('dropFavours', $this->dropFavours);
		$criteria->compare('dropKudos', $this->dropKudos);
		$criteria->compare('gainXp', $this->gainXp);
		$criteria->compare('gainResoluteness', $this->gainResoluteness);
		$criteria->compare('gainWillpower', $this->gainWillpower);
		$criteria->compare('gainCunning', $this->gainCunning);
		$criteria->compare('createEffect', $this->createEffect);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}