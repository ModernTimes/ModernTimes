<?php

/**
 * This is the model base class for the table "{{area}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Area".
 *
 * Columns in table "{{area}}" available as properties of the model,
 * followed by relations of table "{{area}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $specialClass
 * @property string $combatProb
 * @property integer $reqMainstat
 *
 * @property AreaEncounters[] $areaEncounters
 * @property AreaMonsters[] $areaMonsters
 */
abstract class BaseArea extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{area}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Area|Areas', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, specialClass', 'required'),
			array('reqMainstat', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>150),
			array('specialClass', 'length', 'max'=>50),
			array('combatProb', 'length', 'max'=>5),
			array('combatProb, reqMainstat', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, specialClass, combatProb, reqMainstat', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'areaEncounters' => array(self::HAS_MANY, 'AreaEncounters', 'areaID'),
			'areaMonsters' => array(self::HAS_MANY, 'AreaMonsters', 'areaID'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'specialClass' => Yii::t('app', 'Special Class'),
			'combatProb' => Yii::t('app', 'Combat Prob'),
			'reqMainstat' => Yii::t('app', 'Req Mainstat'),
			'areaEncounters' => null,
			'areaMonsters' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('specialClass', $this->specialClass, true);
		$criteria->compare('combatProb', $this->combatProb, true);
		$criteria->compare('reqMainstat', $this->reqMainstat);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}