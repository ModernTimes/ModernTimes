<?php

/**
 * Properties and related Models:
 *
 * - integer id
 * - string name
 * - string specialClass
 * - integer buff
 * - integer singleton
 * - integer increaseDuration
 * - integer blocks
 * - string blockActionTypes
 * - string blockActionNormalSpecial
 * - string blockChance
 * - integer blockTurns
 * - integer blockNumberOfBlocks
 * - string desc
 * - string msgExpire
 *
 * <br>
 * <p>This is the model base class for the table "{{battleeffect}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Battleeffect".</p>
 * <p>Beware: decimals and floats can show up as strings in the attribute list</p>
 *
 * @package System.Models.Base
 */
abstract class BaseBattleeffect extends GxActiveRecord {

    /**
     * Factory method to get Model objects
     * @see http://www.yiiframework.com/doc/api/CModel
     * @param string $className
     * @return CModel
     */
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	/**
	 * Returns the name of the table that this model is based on
	 * @return string
	 */
	public function tableName() {
		return '{{battleeffect}}';
	}

	/**
	 * Returns a label for this Model (singular or plural) based on $n
	 * @param int $n default 1
	 * @return string
	 */
	public static function label($n = 1) {
		return Yii::t('app', 'Battleeffect|Battleeffects', $n);
	}

	/**
	 * Returns a string or array of strings
	 * Not quite sure what this is for, though
	 * @return mixed
	 */
	public static function representingColumn() {
		return 'name';
	}

	/**
	 * Returns an array with rules that specify valid Model data
	 * @return array
	 */
	public function rules() {
		return array(
			array('name, specialClass, desc, msgExpire', 'required'),
			array('buff, singleton, increaseDuration, blocks, blockTurns, blockNumberOfBlocks', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>100),
			array('specialClass', 'length', 'max'=>50),
			array('blockActionTypes', 'length', 'max'=>3),
			array('blockActionNormalSpecial, blockChance', 'length', 'max'=>7),
			array('buff, singleton, increaseDuration, blocks, blockActionTypes, blockActionNormalSpecial, blockChance, blockTurns, blockNumberOfBlocks', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, specialClass, buff, singleton, increaseDuration, blocks, blockActionTypes, blockActionNormalSpecial, blockChance, blockTurns, blockNumberOfBlocks, desc, msgExpire', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * Returns an array of the form 
	 * "relationAttributeName" => array(BELONGS_TO|HAS_MANY, foreign Model, foreign attribute (key))
	 * @return array
	 */
	public function relations() {
		return array(
		);
	}

	/**
	 * Returns an array that specifies pivotModel configurations
	 * @return array
	 */
	public function pivotModels() {
		return array(
		);
	}

	/**
	 * Returns an array with attributeLabels for the Model's attributes
	 * @return array
	 */
	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'specialClass' => Yii::t('app', 'Special Class'),
			'buff' => Yii::t('app', 'Buff'),
			'singleton' => Yii::t('app', 'Singleton'),
			'increaseDuration' => Yii::t('app', 'Increase Duration'),
			'blocks' => Yii::t('app', 'Blocks'),
			'blockActionTypes' => Yii::t('app', 'Block Action Types'),
			'blockActionNormalSpecial' => Yii::t('app', 'Block Action Normal Special'),
			'blockChance' => Yii::t('app', 'Block Chance'),
			'blockTurns' => Yii::t('app', 'Block Turns'),
			'blockNumberOfBlocks' => Yii::t('app', 'Block Number Of Blocks'),
			'desc' => Yii::t('app', 'Desc'),
			'msgExpire' => Yii::t('app', 'Msg Expire'),
		);
	}

	/**
	 * Returns a CActiveDataProvider, fed with search criteria based
	 * on the object's attributes
	 * @return CActiveDataProvider
	 * @link http://www.yiiframework.com/doc/api/CActiveDataProvider
	 */
	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('specialClass', $this->specialClass, true);
		$criteria->compare('buff', $this->buff);
		$criteria->compare('singleton', $this->singleton);
		$criteria->compare('increaseDuration', $this->increaseDuration);
		$criteria->compare('blocks', $this->blocks);
		$criteria->compare('blockActionTypes', $this->blockActionTypes, true);
		$criteria->compare('blockActionNormalSpecial', $this->blockActionNormalSpecial, true);
		$criteria->compare('blockChance', $this->blockChance, true);
		$criteria->compare('blockTurns', $this->blockTurns);
		$criteria->compare('blockNumberOfBlocks', $this->blockNumberOfBlocks);
		$criteria->compare('desc', $this->desc, true);
		$criteria->compare('msgExpire', $this->msgExpire, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}