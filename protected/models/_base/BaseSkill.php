<?php

/**
 * This is the model base class for the table "{{skill}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Skill".
 *
 * Columns in table "{{skill}}" available as properties of the model,
 * followed by relations of table "{{skill}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $skillType
 * @property string $actionType
 * @property string $battlePhase
 * @property string $subType
 * @property string $specialClass
 * @property integer $costEnergy
 * @property integer $dealsDamage
 * @property string $damageAttackFactor
 * @property integer $damageFixedAmount
 * @property string $damageType
 * @property integer $healing
 * @property integer $createEffect
 * @property integer $effectTurns
 * @property string $desc
 * @property string $msgResolved
 *
 * @property CharacterSkills[] $characterSkills
 * @property MonsterSkills[] $monsterSkills
 * @property Battleeffect $createEffect0
 * @property Skillset[] $skillsets
 * @property Skillset[] $skillsets1
 * @property Skillset[] $skillsets2
 * @property Skillset[] $skillsets3
 * @property Skillset[] $skillsets4
 * @property Skillset[] $skillsets5
 * @property Skillset[] $skillsets6
 * @property Skillset[] $skillsets7
 * @property Skillset[] $skillsets8
 * @property Skillset[] $skillsets9
 */
abstract class BaseSkill extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{skill}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Skill|Skills', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, subType, specialClass, desc, msgResolved', 'required'),
			array('costEnergy, dealsDamage, damageFixedAmount, healing, createEffect, effectTurns', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>50),
			array('skillType', 'length', 'max'=>9),
			array('actionType', 'length', 'max'=>10),
			array('battlePhase', 'length', 'max'=>7),
			array('subType', 'length', 'max'=>20),
			array('specialClass', 'length', 'max'=>40),
			array('damageAttackFactor', 'length', 'max'=>5),
			array('damageType', 'length', 'max'=>8),
			array('skillType, actionType, battlePhase, costEnergy, dealsDamage, damageAttackFactor, damageFixedAmount, damageType, healing, createEffect, effectTurns', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, skillType, actionType, battlePhase, subType, specialClass, costEnergy, dealsDamage, damageAttackFactor, damageFixedAmount, damageType, healing, createEffect, effectTurns, desc, msgResolved', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'characterSkills' => array(self::HAS_MANY, 'CharacterSkills', 'skillID'),
			'monsterSkills' => array(self::HAS_MANY, 'MonsterSkills', 'skillID'),
			'createEffect0' => array(self::BELONGS_TO, 'Battleeffect', 'createEffect'),
			'skillsets' => array(self::HAS_MANY, 'Skillset', 'pos9'),
			'skillsets1' => array(self::HAS_MANY, 'Skillset', 'pos10'),
			'skillsets2' => array(self::HAS_MANY, 'Skillset', 'pos1'),
			'skillsets3' => array(self::HAS_MANY, 'Skillset', 'pos2'),
			'skillsets4' => array(self::HAS_MANY, 'Skillset', 'pos3'),
			'skillsets5' => array(self::HAS_MANY, 'Skillset', 'pos4'),
			'skillsets6' => array(self::HAS_MANY, 'Skillset', 'pos5'),
			'skillsets7' => array(self::HAS_MANY, 'Skillset', 'pos6'),
			'skillsets8' => array(self::HAS_MANY, 'Skillset', 'pos7'),
			'skillsets9' => array(self::HAS_MANY, 'Skillset', 'pos8'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'skillType' => Yii::t('app', 'Skill Type'),
			'actionType' => Yii::t('app', 'Action Type'),
			'battlePhase' => Yii::t('app', 'Battle Phase'),
			'subType' => Yii::t('app', 'Sub Type'),
			'specialClass' => Yii::t('app', 'Special Class'),
			'costEnergy' => Yii::t('app', 'Cost Energy'),
			'dealsDamage' => Yii::t('app', 'Deals Damage'),
			'damageAttackFactor' => Yii::t('app', 'Damage Attack Factor'),
			'damageFixedAmount' => Yii::t('app', 'Damage Fixed Amount'),
			'damageType' => Yii::t('app', 'Damage Type'),
			'healing' => Yii::t('app', 'Healing'),
			'createEffect' => null,
			'effectTurns' => Yii::t('app', 'Effect Turns'),
			'desc' => Yii::t('app', 'Desc'),
			'msgResolved' => Yii::t('app', 'Msg Resolved'),
			'characterSkills' => null,
			'monsterSkills' => null,
			'createEffect0' => null,
			'skillsets' => null,
			'skillsets1' => null,
			'skillsets2' => null,
			'skillsets3' => null,
			'skillsets4' => null,
			'skillsets5' => null,
			'skillsets6' => null,
			'skillsets7' => null,
			'skillsets8' => null,
			'skillsets9' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('skillType', $this->skillType, true);
		$criteria->compare('actionType', $this->actionType, true);
		$criteria->compare('battlePhase', $this->battlePhase, true);
		$criteria->compare('subType', $this->subType, true);
		$criteria->compare('specialClass', $this->specialClass, true);
		$criteria->compare('costEnergy', $this->costEnergy);
		$criteria->compare('dealsDamage', $this->dealsDamage);
		$criteria->compare('damageAttackFactor', $this->damageAttackFactor, true);
		$criteria->compare('damageFixedAmount', $this->damageFixedAmount);
		$criteria->compare('damageType', $this->damageType, true);
		$criteria->compare('healing', $this->healing);
		$criteria->compare('createEffect', $this->createEffect);
		$criteria->compare('effectTurns', $this->effectTurns);
		$criteria->compare('desc', $this->desc, true);
		$criteria->compare('msgResolved', $this->msgResolved, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}