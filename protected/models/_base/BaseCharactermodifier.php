<?php

/**
 * Properties and related Models:
 *
 * - integer id
 * - integer hp
 * - integer hpPerc
 * - integer energy
 * - integer energyPerc
 * - integer resoluteness
 * - integer resolutenessPerc
 * - integer willpower
 * - integer willpowerPerc
 * - integer cunning
 * - integer cunningPerc
 * - integer dropCash
 * - integer dropCashPerc
 * - integer dropFavours
 * - integer dropFavoursPerc
 * - integer dropKudos
 * - integer dropKudosPerc
 * - integer dropItemPerc
 *
 * - Effect effects
 * - Item items
 * - Skill skills
 * <br>
 * <p>This is the model base class for the table "{{charactermodifier}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Charactermodifier".</p>
 * <p>Beware: decimals and floats can show up as strings in the attribute list</p>
 *
 * @package System.Models.Base
 */
abstract class BaseCharactermodifier extends GxActiveRecord {

    /**
     * Factory method to get Model objects
     * @link http://www.yiiframework.com/doc/api/CModel
     * @param string $className
     * @return CModel
     */
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	/**
	 * Returns the name of the table that this model is based on
	 * @return string
	 */
	public function tableName() {
		return '{{charactermodifier}}';
	}

	/**
	 * Returns a label for this Model (singular or plural) based on $n
	 * @param int $n default 1
	 * @return string
	 */
	public static function label($n = 1) {
		return Yii::t('app', 'Charactermodifier|Charactermodifiers', $n);
	}

	/**
	 * Returns a string or array of strings
	 * Not quite sure what this is for, though
	 * @return mixed
	 */
	public static function representingColumn() {
		return 'id';
	}

	/**
	 * Returns an array with rules that specify valid Model data
	 * @return array
	 */
	public function rules() {
		return array(
			array('hp, hpPerc, energy, energyPerc, resoluteness, resolutenessPerc, willpower, willpowerPerc, cunning, cunningPerc, dropCash, dropCashPerc, dropFavours, dropFavoursPerc, dropKudos, dropKudosPerc, dropItemPerc', 'numerical', 'integerOnly'=>true),
			array('hp, hpPerc, energy, energyPerc, resoluteness, resolutenessPerc, willpower, willpowerPerc, cunning, cunningPerc, dropCash, dropCashPerc, dropFavours, dropFavoursPerc, dropKudos, dropKudosPerc, dropItemPerc', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, hp, hpPerc, energy, energyPerc, resoluteness, resolutenessPerc, willpower, willpowerPerc, cunning, cunningPerc, dropCash, dropCashPerc, dropFavours, dropFavoursPerc, dropKudos, dropKudosPerc, dropItemPerc', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * Returns an array of the form 
	 * "relationAttributeName" => array(BELONGS_TO|HAS_MANY, foreign Model, foreign attribute (key))
	 * @return array
	 */
	public function relations() {
		return array(
			'effects' => array(self::HAS_MANY, 'Effect', 'charactermodifierID'),
			'items' => array(self::HAS_MANY, 'Item', 'charactermodifierID'),
			'skills' => array(self::HAS_MANY, 'Skill', 'charactermodifierID'),
		);
	}

	/**
	 * Returns an array that specifies pivotModel configurations
	 * @return array
	 */
	public function pivotModels() {
		return array(
		);
	}

	/**
	 * Returns an array with attributeLabels for the Model's attributes
	 * @return array
	 */
	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'hp' => Yii::t('app', 'Hp'),
			'hpPerc' => Yii::t('app', 'Hp Perc'),
			'energy' => Yii::t('app', 'Energy'),
			'energyPerc' => Yii::t('app', 'Energy Perc'),
			'resoluteness' => Yii::t('app', 'Resoluteness'),
			'resolutenessPerc' => Yii::t('app', 'Resoluteness Perc'),
			'willpower' => Yii::t('app', 'Willpower'),
			'willpowerPerc' => Yii::t('app', 'Willpower Perc'),
			'cunning' => Yii::t('app', 'Cunning'),
			'cunningPerc' => Yii::t('app', 'Cunning Perc'),
			'dropCash' => Yii::t('app', 'Drop Cash'),
			'dropCashPerc' => Yii::t('app', 'Drop Cash Perc'),
			'dropFavours' => Yii::t('app', 'Drop Favours'),
			'dropFavoursPerc' => Yii::t('app', 'Drop Favours Perc'),
			'dropKudos' => Yii::t('app', 'Drop Kudos'),
			'dropKudosPerc' => Yii::t('app', 'Drop Kudos Perc'),
			'dropItemPerc' => Yii::t('app', 'Drop Item Perc'),
			'effects' => null,
			'items' => null,
			'skills' => null,
		);
	}

	/**
	 * Returns a CActiveDataProvider, fed with search criteria based
	 * on the object's attributes
	 * @return CActiveDataProvider
	 * @link http://www.yiiframework.com/doc/api/CActiveDataProvider
	 */
	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('hp', $this->hp);
		$criteria->compare('hpPerc', $this->hpPerc);
		$criteria->compare('energy', $this->energy);
		$criteria->compare('energyPerc', $this->energyPerc);
		$criteria->compare('resoluteness', $this->resoluteness);
		$criteria->compare('resolutenessPerc', $this->resolutenessPerc);
		$criteria->compare('willpower', $this->willpower);
		$criteria->compare('willpowerPerc', $this->willpowerPerc);
		$criteria->compare('cunning', $this->cunning);
		$criteria->compare('cunningPerc', $this->cunningPerc);
		$criteria->compare('dropCash', $this->dropCash);
		$criteria->compare('dropCashPerc', $this->dropCashPerc);
		$criteria->compare('dropFavours', $this->dropFavours);
		$criteria->compare('dropFavoursPerc', $this->dropFavoursPerc);
		$criteria->compare('dropKudos', $this->dropKudos);
		$criteria->compare('dropKudosPerc', $this->dropKudosPerc);
		$criteria->compare('dropItemPerc', $this->dropItemPerc);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}