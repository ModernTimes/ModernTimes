<?php

/**
 * Properties and related Models:
 *
 * - integer id
 * - integer hp
 * - integer hpPerc
 * - integer energy
 * - integer energyPerc
 * - integer resoluteness
 * - integer resolutenessPerc
 * - integer willpower
 * - integer willpowerPerc
 * - integer cunning
 * - integer cunningPerc
 * - integer dropCash
 * - integer dropCashPerc
 * - integer dropFavours
 * - integer dropFavoursPerc
 * - integer dropKudos
 * - integer dropKudosPerc
 * - integer dropItemPerc
 * - integer critChancePerc
 * - integer damageNormalAbs
 * - integer damageNormalPerc
 * - integer damageEnvyAbs
 * - integer damageEnvyPerc
 * - integer damageGreedAbs
 * - integer damageGreedPerc
 * - integer damageGluttonyAbs
 * - integer damageGluttonyPerc
 * - integer damageLustAbs
 * - integer damageLustPerc
 * - integer damagePrideAbs
 * - integer damagePridePerc
 * - integer damageSlothAbs
 * - integer damageSlothPerc
 * - integer damageWrathAbs
 * - integer damageWrathPerc
 * - integer resistanceAbs
 * - integer resistanceLevelNormal
 * - integer resistanceLevelEnvy
 * - integer resistanceLevelGreed
 * - integer resistanceLevelGluttony
 * - integer resistanceLevelLust
 * - integer resistanceLevelPride
 * - integer resistanceLevelSloth
 * - integer resistanceLevelWrath
 *
 * - Effect effects
 * - Item items
 * - Skill skills
 * <br>
 * <p>This is the model base class for the table "{{charactermodifier}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Charactermodifier".</p>
 * <p>Beware: decimals and floats can show up as strings in the attribute list</p>
 *
 * @package System.Models.Base
 */
abstract class BaseCharactermodifier extends GxActiveRecord {

    /**
     * Factory method to get Model objects
     * @link http://www.yiiframework.com/doc/api/CModel
     * @param string $className
     * @return CModel
     */
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	/**
	 * Returns the name of the table that this model is based on
	 * @return string
	 */
	public function tableName() {
		return '{{charactermodifier}}';
	}

	/**
	 * Returns a label for this Model (singular or plural) based on $n
	 * @param int $n default 1
	 * @return string
	 */
	public static function label($n = 1) {
		return Yii::t('app', 'Charactermodifier|Charactermodifiers', $n);
	}

	/**
	 * Returns a string or array of strings
	 * Not quite sure what this is for, though
	 * @return mixed
	 */
	public static function representingColumn() {
		return 'id';
	}

	/**
	 * Returns an array with rules that specify valid Model data
	 * @return array
	 */
	public function rules() {
		return array(
			array('hp, hpPerc, energy, energyPerc, resoluteness, resolutenessPerc, willpower, willpowerPerc, cunning, cunningPerc, dropCash, dropCashPerc, dropFavours, dropFavoursPerc, dropKudos, dropKudosPerc, dropItemPerc, critChancePerc, damageNormalAbs, damageNormalPerc, damageEnvyAbs, damageEnvyPerc, damageGreedAbs, damageGreedPerc, damageGluttonyAbs, damageGluttonyPerc, damageLustAbs, damageLustPerc, damagePrideAbs, damagePridePerc, damageSlothAbs, damageSlothPerc, damageWrathAbs, damageWrathPerc, resistanceAbs, resistanceLevelNormal, resistanceLevelEnvy, resistanceLevelGreed, resistanceLevelGluttony, resistanceLevelLust, resistanceLevelPride, resistanceLevelSloth, resistanceLevelWrath', 'numerical', 'integerOnly'=>true),
			array('hp, hpPerc, energy, energyPerc, resoluteness, resolutenessPerc, willpower, willpowerPerc, cunning, cunningPerc, dropCash, dropCashPerc, dropFavours, dropFavoursPerc, dropKudos, dropKudosPerc, dropItemPerc, critChancePerc, damageNormalAbs, damageNormalPerc, damageEnvyAbs, damageEnvyPerc, damageGreedAbs, damageGreedPerc, damageGluttonyAbs, damageGluttonyPerc, damageLustAbs, damageLustPerc, damagePrideAbs, damagePridePerc, damageSlothAbs, damageSlothPerc, damageWrathAbs, damageWrathPerc, resistanceAbs, resistanceLevelNormal, resistanceLevelEnvy, resistanceLevelGreed, resistanceLevelGluttony, resistanceLevelLust, resistanceLevelPride, resistanceLevelSloth, resistanceLevelWrath', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, hp, hpPerc, energy, energyPerc, resoluteness, resolutenessPerc, willpower, willpowerPerc, cunning, cunningPerc, dropCash, dropCashPerc, dropFavours, dropFavoursPerc, dropKudos, dropKudosPerc, dropItemPerc, critChancePerc, damageNormalAbs, damageNormalPerc, damageEnvyAbs, damageEnvyPerc, damageGreedAbs, damageGreedPerc, damageGluttonyAbs, damageGluttonyPerc, damageLustAbs, damageLustPerc, damagePrideAbs, damagePridePerc, damageSlothAbs, damageSlothPerc, damageWrathAbs, damageWrathPerc, resistanceAbs, resistanceLevelNormal, resistanceLevelEnvy, resistanceLevelGreed, resistanceLevelGluttony, resistanceLevelLust, resistanceLevelPride, resistanceLevelSloth, resistanceLevelWrath', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * Returns an array of the form 
	 * "relationAttributeName" => array(BELONGS_TO|HAS_MANY, foreign Model, foreign attribute (key))
	 * @return array
	 */
	public function relations() {
		return array(
			'effects' => array(self::HAS_MANY, 'Effect', 'charactermodifierID'),
			'items' => array(self::HAS_MANY, 'Item', 'charactermodifierID'),
			'skills' => array(self::HAS_MANY, 'Skill', 'charactermodifierID'),
		);
	}

	/**
	 * Returns an array that specifies pivotModel configurations
	 * @return array
	 */
	public function pivotModels() {
		return array(
		);
	}

	/**
	 * Returns an array with attributeLabels for the Model's attributes
	 * @return array
	 */
	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'hp' => Yii::t('app', 'Hp'),
			'hpPerc' => Yii::t('app', 'Hp Perc'),
			'energy' => Yii::t('app', 'Energy'),
			'energyPerc' => Yii::t('app', 'Energy Perc'),
			'resoluteness' => Yii::t('app', 'Resoluteness'),
			'resolutenessPerc' => Yii::t('app', 'Resoluteness Perc'),
			'willpower' => Yii::t('app', 'Willpower'),
			'willpowerPerc' => Yii::t('app', 'Willpower Perc'),
			'cunning' => Yii::t('app', 'Cunning'),
			'cunningPerc' => Yii::t('app', 'Cunning Perc'),
			'dropCash' => Yii::t('app', 'Drop Cash'),
			'dropCashPerc' => Yii::t('app', 'Drop Cash Perc'),
			'dropFavours' => Yii::t('app', 'Drop Favours'),
			'dropFavoursPerc' => Yii::t('app', 'Drop Favours Perc'),
			'dropKudos' => Yii::t('app', 'Drop Kudos'),
			'dropKudosPerc' => Yii::t('app', 'Drop Kudos Perc'),
			'dropItemPerc' => Yii::t('app', 'Drop Item Perc'),
			'critChancePerc' => Yii::t('app', 'Crit Chance Perc'),
			'damageNormalAbs' => Yii::t('app', 'Damage Normal Abs'),
			'damageNormalPerc' => Yii::t('app', 'Damage Normal Perc'),
			'damageEnvyAbs' => Yii::t('app', 'Damage Envy Abs'),
			'damageEnvyPerc' => Yii::t('app', 'Damage Envy Perc'),
			'damageGreedAbs' => Yii::t('app', 'Damage Greed Abs'),
			'damageGreedPerc' => Yii::t('app', 'Damage Greed Perc'),
			'damageGluttonyAbs' => Yii::t('app', 'Damage Gluttony Abs'),
			'damageGluttonyPerc' => Yii::t('app', 'Damage Gluttony Perc'),
			'damageLustAbs' => Yii::t('app', 'Damage Lust Abs'),
			'damageLustPerc' => Yii::t('app', 'Damage Lust Perc'),
			'damagePrideAbs' => Yii::t('app', 'Damage Pride Abs'),
			'damagePridePerc' => Yii::t('app', 'Damage Pride Perc'),
			'damageSlothAbs' => Yii::t('app', 'Damage Sloth Abs'),
			'damageSlothPerc' => Yii::t('app', 'Damage Sloth Perc'),
			'damageWrathAbs' => Yii::t('app', 'Damage Wrath Abs'),
			'damageWrathPerc' => Yii::t('app', 'Damage Wrath Perc'),
			'resistanceAbs' => Yii::t('app', 'Resistance Abs'),
			'resistanceLevelNormal' => Yii::t('app', 'Resistance Level Normal'),
			'resistanceLevelEnvy' => Yii::t('app', 'Resistance Level Envy'),
			'resistanceLevelGreed' => Yii::t('app', 'Resistance Level Greed'),
			'resistanceLevelGluttony' => Yii::t('app', 'Resistance Level Gluttony'),
			'resistanceLevelLust' => Yii::t('app', 'Resistance Level Lust'),
			'resistanceLevelPride' => Yii::t('app', 'Resistance Level Pride'),
			'resistanceLevelSloth' => Yii::t('app', 'Resistance Level Sloth'),
			'resistanceLevelWrath' => Yii::t('app', 'Resistance Level Wrath'),
			'effects' => null,
			'items' => null,
			'skills' => null,
		);
	}

	/**
	 * Returns a CActiveDataProvider, fed with search criteria based
	 * on the object's attributes
	 * @return CActiveDataProvider
	 * @link http://www.yiiframework.com/doc/api/CActiveDataProvider
	 */
	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('hp', $this->hp);
		$criteria->compare('hpPerc', $this->hpPerc);
		$criteria->compare('energy', $this->energy);
		$criteria->compare('energyPerc', $this->energyPerc);
		$criteria->compare('resoluteness', $this->resoluteness);
		$criteria->compare('resolutenessPerc', $this->resolutenessPerc);
		$criteria->compare('willpower', $this->willpower);
		$criteria->compare('willpowerPerc', $this->willpowerPerc);
		$criteria->compare('cunning', $this->cunning);
		$criteria->compare('cunningPerc', $this->cunningPerc);
		$criteria->compare('dropCash', $this->dropCash);
		$criteria->compare('dropCashPerc', $this->dropCashPerc);
		$criteria->compare('dropFavours', $this->dropFavours);
		$criteria->compare('dropFavoursPerc', $this->dropFavoursPerc);
		$criteria->compare('dropKudos', $this->dropKudos);
		$criteria->compare('dropKudosPerc', $this->dropKudosPerc);
		$criteria->compare('dropItemPerc', $this->dropItemPerc);
		$criteria->compare('critChancePerc', $this->critChancePerc);
		$criteria->compare('damageNormalAbs', $this->damageNormalAbs);
		$criteria->compare('damageNormalPerc', $this->damageNormalPerc);
		$criteria->compare('damageEnvyAbs', $this->damageEnvyAbs);
		$criteria->compare('damageEnvyPerc', $this->damageEnvyPerc);
		$criteria->compare('damageGreedAbs', $this->damageGreedAbs);
		$criteria->compare('damageGreedPerc', $this->damageGreedPerc);
		$criteria->compare('damageGluttonyAbs', $this->damageGluttonyAbs);
		$criteria->compare('damageGluttonyPerc', $this->damageGluttonyPerc);
		$criteria->compare('damageLustAbs', $this->damageLustAbs);
		$criteria->compare('damageLustPerc', $this->damageLustPerc);
		$criteria->compare('damagePrideAbs', $this->damagePrideAbs);
		$criteria->compare('damagePridePerc', $this->damagePridePerc);
		$criteria->compare('damageSlothAbs', $this->damageSlothAbs);
		$criteria->compare('damageSlothPerc', $this->damageSlothPerc);
		$criteria->compare('damageWrathAbs', $this->damageWrathAbs);
		$criteria->compare('damageWrathPerc', $this->damageWrathPerc);
		$criteria->compare('resistanceAbs', $this->resistanceAbs);
		$criteria->compare('resistanceLevelNormal', $this->resistanceLevelNormal);
		$criteria->compare('resistanceLevelEnvy', $this->resistanceLevelEnvy);
		$criteria->compare('resistanceLevelGreed', $this->resistanceLevelGreed);
		$criteria->compare('resistanceLevelGluttony', $this->resistanceLevelGluttony);
		$criteria->compare('resistanceLevelLust', $this->resistanceLevelLust);
		$criteria->compare('resistanceLevelPride', $this->resistanceLevelPride);
		$criteria->compare('resistanceLevelSloth', $this->resistanceLevelSloth);
		$criteria->compare('resistanceLevelWrath', $this->resistanceLevelWrath);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}