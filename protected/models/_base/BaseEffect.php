<?php

/**
 * This is the model base class for the table "{{effect}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Effect".
 *
 * Columns in table "{{effect}}" available as properties of the model,
 * followed by relations of table "{{effect}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $specialClass
 * @property integer $charactermodifierID
 * @property string $desc
 *
 * @property CharacterEffects[] $characterEffects
 * @property Charactermodifier $charactermodifier
 * @property Encounter[] $encounters
 */
abstract class BaseEffect extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{effect}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Effect|Effects', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, specialClass, charactermodifierID', 'required'),
			array('charactermodifierID', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>75),
			array('specialClass', 'length', 'max'=>50),
			array('desc', 'safe'),
			array('desc', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, specialClass, charactermodifierID, desc', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'characterEffects' => array(self::HAS_MANY, 'CharacterEffects', 'effectID'),
			'charactermodifier' => array(self::BELONGS_TO, 'Charactermodifier', 'charactermodifierID'),
			'encounters' => array(self::HAS_MANY, 'Encounter', 'createEffect'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'specialClass' => Yii::t('app', 'Special Class'),
			'charactermodifierID' => null,
			'desc' => Yii::t('app', 'Desc'),
			'characterEffects' => null,
			'charactermodifier' => null,
			'encounters' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('specialClass', $this->specialClass, true);
		$criteria->compare('charactermodifierID', $this->charactermodifierID);
		$criteria->compare('desc', $this->desc, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}