<?php

/**
 * This is the model base class for the table "{{item}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Item".
 *
 * Columns in table "{{item}}" available as properties of the model,
 * followed by relations of table "{{item}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $specialClass
 * @property integer $charactermodifierID
 * @property string $type
 * @property integer $usable
 * @property integer $tradeable
 * @property string $desc
 * @property string $reqClass
 * @property integer $reqResoluteness
 * @property integer $reqWillpower
 * @property integer $reqCunning
 * @property integer $autosellCash
 * @property integer $autosellFavours
 * @property integer $autosellKudos
 * @property integer $useHp
 * @property integer $useEnergy
 * @property integer $useEffectID
 * @property integer $useEffectDuration
 *
 * @property CharacterEquipments[] $characterEquipments
 * @property CharacterEquipments[] $characterEquipments1
 * @property CharacterEquipments[] $characterEquipments2
 * @property CharacterEquipments[] $characterEquipments3
 * @property CharacterEquipments[] $characterEquipments4
 * @property CharacterItems[] $characterItems
 * @property EncounterItems[] $encounterItems
 * @property Charactermodifier $charactermodifier
 * @property MonsterItems[] $monsterItems
 */
abstract class BaseItem extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{item}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Item|Items', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, specialClass, desc, useEffectID', 'required'),
			array('charactermodifierID, usable, tradeable, reqResoluteness, reqWillpower, reqCunning, autosellCash, autosellFavours, autosellKudos, useHp, useEnergy, useEffectID, useEffectDuration', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>75),
			array('specialClass', 'length', 'max'=>50),
			array('reqClass', 'length', 'max'=>10),
			array('type', 'safe'),
			array('charactermodifierID, type, usable, tradeable, reqClass, reqResoluteness, reqWillpower, reqCunning, autosellCash, autosellFavours, autosellKudos, useHp, useEnergy, useEffectDuration', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, specialClass, charactermodifierID, type, usable, tradeable, desc, reqClass, reqResoluteness, reqWillpower, reqCunning, autosellCash, autosellFavours, autosellKudos, useHp, useEnergy, useEffectID, useEffectDuration', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'characterEquipments' => array(self::HAS_MANY, 'CharacterEquipments', 'weapon'),
			'characterEquipments1' => array(self::HAS_MANY, 'CharacterEquipments', 'offhand'),
			'characterEquipments2' => array(self::HAS_MANY, 'CharacterEquipments', 'accessoryA'),
			'characterEquipments3' => array(self::HAS_MANY, 'CharacterEquipments', 'accessoryB'),
			'characterEquipments4' => array(self::HAS_MANY, 'CharacterEquipments', 'accessoryC'),
			'characterItems' => array(self::HAS_MANY, 'CharacterItems', 'itemID'),
			'encounterItems' => array(self::HAS_MANY, 'EncounterItems', 'itemID'),
			'charactermodifier' => array(self::BELONGS_TO, 'Charactermodifier', 'charactermodifierID'),
			'monsterItems' => array(self::HAS_MANY, 'MonsterItems', 'itemID'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'specialClass' => Yii::t('app', 'Special Class'),
			'charactermodifierID' => null,
			'type' => Yii::t('app', 'Type'),
			'usable' => Yii::t('app', 'Usable'),
			'tradeable' => Yii::t('app', 'Tradeable'),
			'desc' => Yii::t('app', 'Desc'),
			'reqClass' => Yii::t('app', 'Req Class'),
			'reqResoluteness' => Yii::t('app', 'Req Resoluteness'),
			'reqWillpower' => Yii::t('app', 'Req Willpower'),
			'reqCunning' => Yii::t('app', 'Req Cunning'),
			'autosellCash' => Yii::t('app', 'Autosell Cash'),
			'autosellFavours' => Yii::t('app', 'Autosell Favours'),
			'autosellKudos' => Yii::t('app', 'Autosell Kudos'),
			'useHp' => Yii::t('app', 'Use Hp'),
			'useEnergy' => Yii::t('app', 'Use Energy'),
			'useEffectID' => Yii::t('app', 'Use Effect'),
			'useEffectDuration' => Yii::t('app', 'Use Effect Duration'),
			'characterEquipments' => null,
			'characterEquipments1' => null,
			'characterEquipments2' => null,
			'characterEquipments3' => null,
			'characterEquipments4' => null,
			'characterItems' => null,
			'encounterItems' => null,
			'charactermodifier' => null,
			'monsterItems' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('specialClass', $this->specialClass, true);
		$criteria->compare('charactermodifierID', $this->charactermodifierID);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('usable', $this->usable);
		$criteria->compare('tradeable', $this->tradeable);
		$criteria->compare('desc', $this->desc, true);
		$criteria->compare('reqClass', $this->reqClass, true);
		$criteria->compare('reqResoluteness', $this->reqResoluteness);
		$criteria->compare('reqWillpower', $this->reqWillpower);
		$criteria->compare('reqCunning', $this->reqCunning);
		$criteria->compare('autosellCash', $this->autosellCash);
		$criteria->compare('autosellFavours', $this->autosellFavours);
		$criteria->compare('autosellKudos', $this->autosellKudos);
		$criteria->compare('useHp', $this->useHp);
		$criteria->compare('useEnergy', $this->useEnergy);
		$criteria->compare('useEffectID', $this->useEffectID);
		$criteria->compare('useEffectDuration', $this->useEffectDuration);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}