<?php

/**
 * Properties and related Models:
 *
 * - integer id
 * - string name
 * - string specialClass
 * - integer charactermodifierID
 * - integer requirementID
 * - string type
 * - integer usable
 * - integer tradable
 * - integer autosellable
 * - string desc
 * - integer autosellCash
 * - integer useHp
 * - integer useEnergy
 * - integer useEffectID
 * - integer useEffectDuration
 * - string useMsg
 *
 * - CharacterEquipments characterEquipments
 * - CharacterEquipments characterEquipments1
 * - CharacterEquipments characterEquipments2
 * - CharacterEquipments characterEquipments3
 * - CharacterEquipments characterEquipments4
 * - CharacterItems characterItems
 * - EncounterItems encounterItems
 * - Charactermodifier charactermodifier
 * - Effect useEffect
 * - Requirement requirement
 * - MonsterItems monsterItems
 * - Recipe recipes
 * - Recipe recipes1
 * - Recipe recipes2
 * - ShopItems shopItems
 * <br>
 * <p>This is the model base class for the table "{{item}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Item".</p>
 * <p>Beware: decimals and floats can show up as strings in the attribute list</p>
 *
 * @package System.Models.Base
 */
abstract class BaseItem extends GxActiveRecord {

    /**
     * Factory method to get Model objects
     * @link http://www.yiiframework.com/doc/api/CModel
     * @param string $className
     * @return CModel
     */
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	/**
	 * Returns the name of the table that this model is based on
	 * @return string
	 */
	public function tableName() {
		return '{{item}}';
	}

	/**
	 * Returns a label for this Model (singular or plural) based on $n
	 * @param int $n default 1
	 * @return string
	 */
	public static function label($n = 1) {
		return Yii::t('app', 'Item|Items', $n);
	}

	/**
	 * Returns a string or array of strings
	 * Not quite sure what this is for, though
	 * @return mixed
	 */
	public static function representingColumn() {
		return 'name';
	}

	/**
	 * Returns an array with rules that specify valid Model data
	 * @return array
	 */
	public function rules() {
		return array(
			array('name, specialClass, desc, useMsg', 'required'),
			array('charactermodifierID, requirementID, usable, tradable, autosellable, autosellCash, useHp, useEnergy, useEffectID, useEffectDuration', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>100),
			array('specialClass', 'length', 'max'=>50),
			array('type', 'length', 'max'=>9),
			array('charactermodifierID, requirementID, type, usable, tradable, autosellable, autosellCash, useHp, useEnergy, useEffectID, useEffectDuration', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, specialClass, charactermodifierID, requirementID, type, usable, tradable, autosellable, desc, autosellCash, useHp, useEnergy, useEffectID, useEffectDuration, useMsg', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * Returns an array of the form 
	 * "relationAttributeName" => array(BELONGS_TO|HAS_MANY, foreign Model, foreign attribute (key))
	 * @return array
	 */
	public function relations() {
		return array(
			'characterEquipments' => array(self::HAS_MANY, 'CharacterEquipments', 'weaponID'),
			'characterEquipments1' => array(self::HAS_MANY, 'CharacterEquipments', 'offhandID'),
			'characterEquipments2' => array(self::HAS_MANY, 'CharacterEquipments', 'accessoryAID'),
			'characterEquipments3' => array(self::HAS_MANY, 'CharacterEquipments', 'accessoryBID'),
			'characterEquipments4' => array(self::HAS_MANY, 'CharacterEquipments', 'accessoryCID'),
			'characterItems' => array(self::HAS_MANY, 'CharacterItems', 'itemID'),
			'encounterItems' => array(self::HAS_MANY, 'EncounterItems', 'itemID'),
			'charactermodifier' => array(self::BELONGS_TO, 'Charactermodifier', 'charactermodifierID'),
			'useEffect' => array(self::BELONGS_TO, 'Effect', 'useEffectID'),
			'requirement' => array(self::BELONGS_TO, 'Requirement', 'requirementID'),
			'monsterItems' => array(self::HAS_MANY, 'MonsterItems', 'itemID'),
			'recipes' => array(self::HAS_MANY, 'Recipe', 'item1ID'),
			'recipes1' => array(self::HAS_MANY, 'Recipe', 'item2ID'),
			'recipes2' => array(self::HAS_MANY, 'Recipe', 'itemResultID'),
			'shopItems' => array(self::HAS_MANY, 'ShopItems', 'itemID'),
		);
	}

	/**
	 * Returns an array that specifies pivotModel configurations
	 * @return array
	 */
	public function pivotModels() {
		return array(
		);
	}

	/**
	 * Returns an array with attributeLabels for the Model's attributes
	 * @return array
	 */
	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'specialClass' => Yii::t('app', 'Special Class'),
			'charactermodifierID' => null,
			'requirementID' => null,
			'type' => Yii::t('app', 'Type'),
			'usable' => Yii::t('app', 'Usable'),
			'tradable' => Yii::t('app', 'Tradable'),
			'autosellable' => Yii::t('app', 'Autosellable'),
			'desc' => Yii::t('app', 'Desc'),
			'autosellCash' => Yii::t('app', 'Autosell Cash'),
			'useHp' => Yii::t('app', 'Use Hp'),
			'useEnergy' => Yii::t('app', 'Use Energy'),
			'useEffectID' => null,
			'useEffectDuration' => Yii::t('app', 'Use Effect Duration'),
			'useMsg' => Yii::t('app', 'Use Msg'),
			'characterEquipments' => null,
			'characterEquipments1' => null,
			'characterEquipments2' => null,
			'characterEquipments3' => null,
			'characterEquipments4' => null,
			'characterItems' => null,
			'encounterItems' => null,
			'charactermodifier' => null,
			'useEffect' => null,
			'requirement' => null,
			'monsterItems' => null,
			'recipes' => null,
			'recipes1' => null,
			'recipes2' => null,
			'shopItems' => null,
		);
	}

	/**
	 * Returns a CActiveDataProvider, fed with search criteria based
	 * on the object's attributes
	 * @return CActiveDataProvider
	 * @link http://www.yiiframework.com/doc/api/CActiveDataProvider
	 */
	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('specialClass', $this->specialClass, true);
		$criteria->compare('charactermodifierID', $this->charactermodifierID);
		$criteria->compare('requirementID', $this->requirementID);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('usable', $this->usable);
		$criteria->compare('tradable', $this->tradable);
		$criteria->compare('autosellable', $this->autosellable);
		$criteria->compare('desc', $this->desc, true);
		$criteria->compare('autosellCash', $this->autosellCash);
		$criteria->compare('useHp', $this->useHp);
		$criteria->compare('useEnergy', $this->useEnergy);
		$criteria->compare('useEffectID', $this->useEffectID);
		$criteria->compare('useEffectDuration', $this->useEffectDuration);
		$criteria->compare('useMsg', $this->useMsg, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}