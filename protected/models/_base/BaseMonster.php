<?php

/**
 * This is the model base class for the table "{{monster}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Monster".
 *
 * Columns in table "{{monster}}" available as properties of the model,
 * followed by relations of table "{{monster}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $specialClass
 * @property integer $hpMax
 * @property integer $attack
 * @property integer $defense
 * @property integer $xp
 * @property integer $dropCash
 * @property integer $dropFavours
 * @property integer $dropKudos
 * @property string $msgEncounter
 *
 * @property AreaMonsters[] $areaMonsters
 * @property MonsterItems[] $monsterItems
 * @property MonsterSkills[] $monsterSkills
 */
abstract class BaseMonster extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{monster}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Monster|Monsters', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, specialClass, hpMax, attack, defense, xp, msgEncounter', 'required'),
			array('hpMax, attack, defense, xp, dropCash, dropFavours, dropKudos', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>75),
			array('specialClass', 'length', 'max'=>50),
			array('dropCash, dropFavours, dropKudos', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, specialClass, hpMax, attack, defense, xp, dropCash, dropFavours, dropKudos, msgEncounter', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'areaMonsters' => array(self::HAS_MANY, 'AreaMonsters', 'monsterID'),
			'monsterItems' => array(self::HAS_MANY, 'MonsterItems', 'monsterID'),
			'monsterSkills' => array(self::HAS_MANY, 'MonsterSkills', 'monsterID'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'specialClass' => Yii::t('app', 'Special Class'),
			'hpMax' => Yii::t('app', 'Hp Max'),
			'attack' => Yii::t('app', 'Attack'),
			'defense' => Yii::t('app', 'Defense'),
			'xp' => Yii::t('app', 'Xp'),
			'dropCash' => Yii::t('app', 'Drop Cash'),
			'dropFavours' => Yii::t('app', 'Drop Favours'),
			'dropKudos' => Yii::t('app', 'Drop Kudos'),
			'msgEncounter' => Yii::t('app', 'Msg Encounter'),
			'areaMonsters' => null,
			'monsterItems' => null,
			'monsterSkills' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('specialClass', $this->specialClass, true);
		$criteria->compare('hpMax', $this->hpMax);
		$criteria->compare('attack', $this->attack);
		$criteria->compare('defense', $this->defense);
		$criteria->compare('xp', $this->xp);
		$criteria->compare('dropCash', $this->dropCash);
		$criteria->compare('dropFavours', $this->dropFavours);
		$criteria->compare('dropKudos', $this->dropKudos);
		$criteria->compare('msgEncounter', $this->msgEncounter, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}